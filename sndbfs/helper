#! /bin/bash

# This is a versatile helper library (a library that contains a set of helper functions).

function chUname()
{

	# Changes the old username to the new one.

	olduname="$1"
	newuname="$2"
	dbpath="$3"
	[[ -z "$1" ]] || [[ -z "$2" ]] || [[ -z "$3" ]] || [[ -n "$4" ]] && return 255
        [[ ! -d "$dbpath/users/$olduname" ]] && return 2

	mv -f "$dbpath/users/$olduname/$olduname" "$dbpath/users/$olduname/$newuname"
	mv -f "$dbpath/users/$olduname/" "$dbpath/users/$newuname"
	
	#rm -rf "$dbpath/users/$olduname"
	sed -i "s/;;uname=[[:print:]]*;;/;;uname=$newuname;;/" "$dbpath/users/$newuname/$newuname"
	return 0
}

function encrptTxt()
{

	# Encrypts text using md5 hash sum and returns the encrypted text.

	txt="$1"
	[[ -z "$1" ]] || [[ -n "$2" ]] && return 255

	echo "$1" | md5sum | awk '{print $1}'
	return 0

}

function resolvStr()
{

	# Resolves the number code using the dictionary provided and returns it's value.

	codenum="$1"
	dict="$2"
        [[ -z "$1" ]] || [[ -z "$2" ]] || [[ -n "$3" ]] && return 255
        [[ ! -f "$dict" ]] && return 4

	cat "$dict" | grep "^$codenum=" | awk -F '=' '{print $2}' | tr -d '"'
	return 0

}

function addDictparm()
{

	# Adds a certain parameter to a dictionary.

	parm="$1"
	dict="$2"
        [[ -z "$1" ]] || [[ -z "$2" ]] || [[ -n "$3" ]] && return 255
        [[ ! -f "$dict" ]] && return 4

	lastnum=`cat "$dict" | sort -nr | head -n 1 | awk -F '=' '{print $1}' | tr -d ' '`
	num=$((lastnum+1))
	echo "$num=\"$parm\"" >> "$dict"
	return 0

}
function resolvUid2uname()
{

        # Resolves user id to session id and returns session id.

        uid="$1"
        dbpath="$2"
        [[ -z "$1" ]] || [[ -z "$2" ]] || [[ -n "$3" ]] && return 255
        [[ ! -d "$dbpath/ids/$uid" ]] && return 2

        uname=`cat "$dbpath/ids/$uid/$uid" 2> /dev/null | awk -F 'uname=' '{print $2}' | awk -F ';;' '{print $1}'`

        [[ -f "$dbpath/users/$uname/$uname" ]] || return 2
	echo "$uname"
        return 0

}
function resolvUname2sessid()
{

        # Resolves username to session id and returns session id.

        uname="$1"
        dbpath="$2"
        [[ -z "$1" ]] || [[ -z "$2" ]] || [[ -n "$3" ]] && return 255
        [[ ! -e "$dbpath/users/$uname" ]] && return 2

        sessid=`ls "$dbpath/users/$uname/" 2> /dev/null | grep -v "$uname"`

        [[ ! -e "$dbpath/sessions/$sessid" ]] && return 3
        echo "$sessid"
        return 0

}
function resolvUid2sessid()
{

        # Resolves user id to session id and returns session id.

        uid="$1"
        dbpath="$2"
        [[ -z "$1" ]] || [[ -z "$2" ]] || [[ -n "$3" ]] && return 255
        [[ ! -d "$dbpath/ids/$uid/" ]] && return 2

        uname=`resolvUid2uname "$1" "$2"`
        rtrn="$?"
        [[ "$rtrn" != 0 ]] && echo "$uname" && return "$rtrn"

        sessid=`resolvUname2sessid "$uname" "$2"`
        rtrn="$?"
        [[ "$rtrn" != 0 ]] && echo "$sessid" && return "$rtrn"

        [[ ! -e "$dbpath/sessions/$sessid" ]] && return 3
        echo "$sessid"
        return 0

}
function resolvUname2uid()
{

        # Resolves username to user id and returns user id.

        uname="$1"
        dbpath="$2"
        [[ -z "$1" ]] || [[ -z "$2" ]] || [[ -n "$3" ]] && return 255
        [[ ! -e "$dbpath/users/$uname/$uname" ]] && return 2

        uid=`cat "$dbpath/users/$uname/$uname" 2> /dev/null | awk -F 'uid=' '{print $2}' | awk -F ';;' '{print $1}'`

        [[ ! -d "$dbpath/ids/$uid/" ]] && return 2
	echo "$uid"
        return 0

}
function resolvSessid2uname()
{

        # Resloves session id to username and returns username.

        sessid="$1"
        dbpath="$2"
        [[ -z "$1" ]] || [[ -z "$2" ]] || [[ -n "$3" ]] && return 255
        [[ ! -e "$dbpath/sessions/$sessid" ]] && return 3

        uname=`cat "$dbpath/sessions/$sessid" 2> /dev/null | awk -F 'uname=' '{print $2}' | awk -F ';;' '{print $1}'`

        [[ ! -e "$dbpath/users/$uname" ]] && return 2
        echo "$uname"
        return 0

}
function resolvSessid2uid()
{

	# Resloves session id to user id and returns user id.

        sessid="$1"
        dbpath="$2"
        [[ -z "$1" ]] || [[ -z "$2" ]] || [[ -n "$3" ]] && return 255
        [[ ! -e "$dbpath/sessions/$sessid" ]] && return 3

        uname=`resolvSessid2uname "$sessid" "$dbpath"`
        rtrn="$?"
        [[ "$rtrn" != 0 ]] && echo "$uname" && return "$rtrn"

        uid=`resolvUname2uid "$uname" "$2"`
        rtrn="$?"
        [[ "$rtrn" != 0 ]] && echo "$uid" && return "$rtrn"

        [[ ! -d "$dbpath/ids/$uid/" ]] && return 2
        echo "$uid"
        return 0

}
function resolvuid2Mail()
{

        # Resloves user id to user's email and returns the email.

        uid="$1"
        dbpath="$2"
        [[ -z "$1" ]] || [[ -z "$2" ]] || [[ -n "$3" ]] && return 255
        [[ ! -e "$dbpath/ids/$uid" ]] && return 2

	[[ -z `cat "$dbpath/ids/$uid/$uid" 2> /dev/null | grep "mail" 2> /dev/null` ]] && return 4

        mail=`cat "$dbpath/ids/$uid/$uid" 2> /dev/null | awk -F 'mail=,' '{print $2}' | awk -F ',;;' '{print $1}'`

        echo "$mail"
        return 0

}
function mkLogs()
{

	# Takes text and log file name and edit the log file.

	txt="$1"
	logfilename="$2"
	dbpath="$3"
	[[ -z "$1" ]] || [[ -z "$2" ]] || [[ -z "$3" ]] || [[ -n "$4" ]] && return 255

	echo "$txt" >> "$dbpath/logs/$logfilename"
	return 0

}

function compFile()
{

        # compresses a file or directory as a .gz archive.

        filepath="$1"
	destpath="$2"
	filename="$3"
        [[ -z "$1" ]] || [[ -z "$2" ]] || [[ -z "$3" ]] || [[ -n "$4" ]] && return 255
        [[ ! -e "$filepath" ]] && return 4

        tar -czf $destpath/$filename.gz $filepath
	return 0

}

function compLogfile()
{

	# Takes a log file name and compresses the log file as a .gz archive in the same path.

	dbpath="$1"
	logfile="$2"
        [[ -z "$1" ]] || [[ -z "$2" ]] || [[ -n "$3" ]] && return 255
        [[ ! -f "$dbpath/logs/$logfile" ]] && return 4

	lastnum=`ls "$dbpath/logs" | grep "$logfile".[[:digit:]]*.gz | awk -F "$logfile" '{print $2}' | awk -F '.' '{print $2}' | sort -gr | head -n 1`
	num=$((lastnum+1))

	if [[ -z "$lastnum" ]]
	then
		newlogfile="$logfile.1"
	else
		newlogfile="$logfile.$num"
	fi

	res=`compFile "$dbpath/logs/$logfile" "$dbpath/logs/" "$newlogfile" `
        rtrn="$?"
        [[ "$rtrn" != 0 ]] && echo "$res" && return "$rtrn"
	return 0

}
function sndConfrmail()
{

        # Sends a confirmation e-mail to a user. The content of the email is saved in a configuration file that is parsed to this function.

        mail="$1"
        confile="$2"
        [[ -z "$1" ]] || [[ -z "$2" ]] || [[ -n "$3" ]] && return 255
        [[ ! -f "$confile" ]] && return 4

        subj=`cat "$confile" | grep subject | awk -F '=' '{print $2}' | tr -d '\"'`
        body=`cat "$confile" | grep body | awk -F '=' '{print $2}' | tr -d '\"'`
	subj=`echo -e "$subj"`
	body=`echo -e "$body"`
        echo "$body" | mail -s "$subj" "$mail"
        return 0

}
